<?php
require __DIR__.'/../vendor/autoload.php';

include_once("./Services/UIComponent/Explorer2/classes/class.ilExplorerBaseGUI.php");

use Tree\Visitor\PreOrderVisitor;
/**
 * Created by PhpStorm.
 * User: Nicola
 * Date: 18.04.2016
 * Time: 14:00
 */
class ilObjMockTree extends ilExplorerBaseGUI
{
	public function __construct($a_parent_obj, $cmd)
	{
		global $ilCtrl, $root;
		$this->ctrl = $ilCtrl;

		parent::__construct(0, $a_parent_obj, $cmd);

		$builder = new Tree\Builder\NodeBuilder;

		$builder
			->value('MockLearningmodule')
			->tree('Chapter 1')
				->leaf('Page 1')
				->leaf('Page 2')
				->tree('Subchapter 1.1')
					->leaf('Page 1')
					->leaf('Page 2')
					->end()
				->end()
			->tree('Chapter 2')
				->leaf('Page 1')
				->end()
		;
		$root = $builder->getNode()->root();
		$visitor = new PreOrderVisitor();
		$yield = $root->accept($visitor);
		$i = 0;
		foreach ($yield as $node)
		{
			if (!$node->isLeaf())
			{
				parent::setNodeOpen($this->getNodeId($node));
			}
			$i++;
		}
	}

	function getRootNode()
	{
		global $root;
		return $root;
	}

	function getChildsOfNode($a_parent_node_id)
	{
		global $root;

		$visitor = new PreOrderVisitor();
		$yield = $root->accept($visitor);
		return $yield[$a_parent_node_id]->getChildren();

	}

	function getNodeContent($a_node)
	{
		return $a_node->getValue();
	}

	function getNodeId($a_node)
	{
		global $root;

		$visitor = new PreOrderVisitor();
		$yield = $root->accept($visitor);
		$i = 0;
		foreach ($yield as $node)
		{
			if ($node === $a_node)
			{
				return $i;
			}
			$i++;
		}
	}
	
	function getNodeIcon($a_node)
	{
		if ($a_node->isLeaf())
		{
			return './templates/default/images/icon_pg.svg';
		}
		elseif ($a_node->isChild())
		{
			return './templates/default/images/icon_st.svg';
		} else return './templates/default/images/icon_lm.svg';
	}

	function isNodeHighlighted($a_node)
	{
		global $root,$ilLocator, $ilCtrl;

		switch ($this->parent_cmd)
		{
			case "showChapterSubtab":
			case "showAllPagesSubtab":
			case "showWeblinkCheckSubtab":
			case "showMediaSubtitlesSubtab":
			case "showInternalLinksSubtab":
			case "showSubchaptersSubtab":
			case "showImportSubtab":
			case "showExportSubtab":
			case "showQuestions":
			case "showStatisticSubtab":
			case "showBlockedUsersSubtab":
			case "showInfo":
			case "showInfoSubtab":
			case "showInfoHistorySubtab":
			case "showUserView":
			case "showUserInfoSubtab":
			case "showContentSubtab":
			case "showTableOfContentsSubtab":
			case "showPrintViewSubtab":
			case "showSettingsSubtab":
			case "showQuestions":
			case "showSettingsSubtab":
			case "showStyleSubtab":
			case "showMenuSubtab":
			case "showGlossariesSubtab":
			case "showMultilinguismSubtab":
			case "showMetadataSubtab":
				if ($a_node === $root)
				{
					return true;
				}
				break;

			case "showChapter":
			case "showSubchapterMetadataSubtab":
			case "showPreconditionsSubtab":
				if ($this->getNodeId($a_node)== 1)
				{
					$ilLocator->addItem("Chapter",$ilCtrl->getLinkTarget($this->parent_obj, "showChapter"));
					return true;
				}
				break;

			case "showSubchapterSubtab":
			case "showPageMetadataSubtab":
			case "showPage":
			case "showEditSubtab":
			case "showPreviewSubtab":
			case "showHistorySubtab":
			case "showClipboardSubtab":
			case "showActivationSubtab":
				if ($this->getNodeId($a_node)== 2)
				{
					return true;
				}
				break;
			default:
				return parent::isNodeHighlighted($a_node); // TODO: Change the autogenerated stub
		}
	}

	function getNodeHref($a_node)
	{
		global $ilCtrl;
		if ($a_node->isLeaf())
			return $ilCtrl->getLinkTarget($this->parent_obj, "showPage");
		elseif ($a_node->isChild())
			return $ilCtrl->getLinkTarget($this->parent_obj, "showChapter");
		else return $ilCtrl->getLinkTarget($this->parent_obj, "showChapterSubtab");
	}
}